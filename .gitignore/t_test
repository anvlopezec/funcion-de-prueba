t_test <- function(varx, nx, vary=NULL, ny=NULL, meanx, meany=NULL,
                     alternative='two.sided',
                     mu=0, conf.level=0.95){
  
  # Checking if the information is correct
  
  # To check if the information about x sample is correct
  if (varx <= 0) 
    stop(paste("The variance x must be positive", "\n", ""))
  if (nx <= 0) 
    stop(paste("The sample size nx must be positive", "\n", ""))
  if (nx %% 1 != 0) 
    stop(paste("The sample size nx must be integer", "\n", ""))
  
  # To check if the user provided information about y sample
  if (xor(is.null(vary), is.null(ny))) 
    stop("Some information about sample y is missing", "\n", "")
  
  # To check if the information about y sample is corrected
  if (! is.null(vary) & ! is.null(ny)) {
    if (vary <= 0) 
      stop(paste("The variance y must be positive", "\n", ""))
    if (ny <= 0) 
      stop(paste("The sample size ny must be positive", "\n", ""))
    if (ny %% 1 != 0) 
      stop(paste("The sample size ny must be integer", "\n", ""))
  }
  
  #To check if the conf.level itÂ´s a number between 1 and 0
  if(conf.level <= 0 || conf.level >= 1)
    stop("The conf.level argument must be >0 and < 1", "\n", "" )
  if(conf.level < 0.5)
    warning("Confidence levels are often close to 1, eg. 0.95")
  
  #To check if alternative is a valid name
  stopifnot(alternative %in% c("two.sided","greater","less","t","g","l"))
  
  #respuesta para una sola poblaciÃ³n
  if (is.null(meany)){
    
    res <- t_test_one(meanx, nx, alternative, 
                        conf.level, mu)
  } else if (varx == vary){
    res<-t_test_two_equal(meanx, varx, nx,#varianzas iguales
                         meany, vary, ny, 
                         alternative, conf.level, mu)
  }else {
    res<-t_test_two_difer(meanx, varx, nx, #varianzas diferen
                        meany, vary, ny, 
                        alternative,conf.level, mu)
  }
  class(res) <- "ttest"
  res   
  
}

#' @export
# funcion para 1 media

t_test_one <- function(meanx, varx, nx, mu,
                       alternative, conf.level) {
  
  alpha <- 1 - conf.level
  
  if (alternative == 'two.sided') {
    alt<-"not equal to"
    statistic <- (meanx - mu) / sqrt(varx / nx)
    p.value <- 2 * pt(q=abs(statistic), df=nx-1, lower.tail=FALSE)
    quantiles <- c(-qt(p=alpha/2, df=nx-1, lower.tail=FALSE),
                   qt(p=alpha/2, df=nx-1, lower.tail=FALSE))
    conf.int <- meanx + quantiles * sqrt(varx / nx)
  }
  
  if (alternative == 'less') {
    alt<-"less than"
    statistic <- (meanx - mu) / sqrt(varx / nx)
    p.value <- pt(q=statistic, df=nx-1, lower.tail=TRUE)
    conf.int <- c(-Inf,
                  meanx + qt(p=1-alpha, df=nx-1) * sqrt(varx / nx))
  }
  
  if (alternative == 'greater') {
    alt<-"greater than"
    statistic <- (meanx - mu) / sqrt(varx / nx)
    p.value <- pt(q=statistic, df=nx-1, lower.tail=FALSE)
    conf.int <- c(meanx + qt(p=alpha, df=nx-1) * sqrt(varx / nx),
                  Inf)
  }
  
  res <- list(conf.int = conf.int,
              statistic = statistic,alt=alt,
              alternative = alternative,
              p.value = p.value, mu = mu,
              df=nx-1, problem ='one_sample')
  return(res)

}
#para 2 poblaciones con varianzas diferentes
#' @export
t_test_two_difer <- function(meanx, varx, nx,
                             meany, vary, ny,
                             mu, alternative,
                             conf.level) {
  
  alpha <- 1 - conf.level
  
  df <- (varx/nx + vary/ny)^2 / ((varx/nx)^2 / (nx-1) + (vary/ny)^2 / (ny-1))
  se <- sqrt(varx/nx + vary/ny)
  statistic <- (meanx - meany - mu) / se
  
  if (alternative == 'two.sided') {
    alt<-"true difference in means is not equal to"
    p.value <- 2 * pt(q=abs(statistic), df=df, lower.tail=FALSE)
    quantiles <- c(-qt(p=alpha/2, df=df, lower.tail=FALSE),
                   qt(p=alpha/2, df=df, lower.tail=FALSE))
    conf.int <- (meanx-meany) + quantiles * se
  }
  
  if (alternative == 'less') {
    alt<-"true difference in means is less than"
    p.value <- pt(q=statistic, df=df, lower.tail=TRUE)
    conf.int <- c(-Inf,
                  (meanx-meany) + qt(p=alpha, df=df, lower.tail=F) * se)
  }
  
  if (alternative == 'greater') {
    alt<- "true difference in means is greater than"
    p.value <- pt(q=statistic, df=df, lower.tail=FALSE)
    conf.int <- c((meanx-meany) - qt(p=alpha, df=df, lower.tail=F) * se,
                  Inf)
  }
  
  res <- list(conf.int=conf.int,
              statistic=statistic,
              alt=alt, alternative=alternative,
              p.value=p.value, mu=mu,
              df=df, problem='two_samples_diff')
  return(res)
}
#2 poblaciones con varianzas iguales
#' @export
t_test_two_equal <- function(meanx, varx, nx,
                             meany, vary, ny,
                             mu, alternative,
                             conf.level) {
  
  alpha <- 1 - conf.level
  
  df <- nx + ny - 2
  sp2 <- ((nx-1) * varx + (ny-1) * vary) / df
  se <- sqrt(sp2/nx + sp2/ny)
  statistic <- (meanx - meany - mu) / se
  
  if (alternative == 'two.sided') {
    alt<-"true difference in means is not equal to"
    p.value <- 2 * pt(q=abs(statistic), df=df, lower.tail=FALSE)
    quantiles <- c(-qt(p=alpha/2, df=df, lower.tail=FALSE),
                   qt(p=alpha/2, df=df, lower.tail=FALSE))
    conf.int <- (meanx-meany) + quantiles * se
  }
  
  if (alternative == 'less') {
    alt<-"true difference in means is less than"
    p.value <- pt(q=statistic, df=df, lower.tail=TRUE)
    conf.int <- c(-Inf,
                  (meanx-meany) + qt(p=alpha, df=df, lower.tail=F) * se)
  }
  
  if (alternative == 'greater') {
    alt<-"true difference in means is greater than"
    p.value <- pt(q=statistic, df=df, lower.tail=FALSE)
    conf.int <- c((meanx-meany) - qt(p=alpha, df=df, lower.tail=F) * se,
                  Inf)
  }
  
  res <- list(conf.int=conf.int,
              statistic=statistic,
              alt=alt,alternative=alternative,
              p.value=p.value,alternative=alternative,
              df=df, problem='two_samples_equal',
              mu=mu)
  return(res)
}
###para ver los resultados 
#' @export
print.ttest <- function(mod, ...)
{
  if (mod$problem == 'one_sample') {
    cat("       t test for mean   \n")
    cat("\n")
    cat(paste("t  = ", round(mod$statistic, digits=5), 
              ", df = ", mod$df,
              ", p-value = ", mod$p.value, "\n"))
    cat("Alternative hypothesis: true mean is" , mod$alt,
        mod$mu, "\n")
    cat(mod$conf.level * 100, "percent confidence interval: \n")
    cat(" ", mod$conf.int, "\n")
    cat("Sample stimates \n")
    cat(" ", mod$meanx, "\n")
  }
  else if (mod$problem == "two_samples_diff"){
    cat("       t test to compare two variances   \n")
    cat("\n")
    cat(paste("t = ", round(mod$statistic, digits=5), 
              ", num df = ", mod$df,
              ", p-value = ", mod$p.value, "\n"))
    cat("Alternative hypothesis: true difference of means is" , mod$alt,
        mod$mu, "\n")
    cat(mod$conf.level * 100, "percent confidence interval: \n")
    cat(" ", mod$conf.int, "\n")
    cat("sample estimates: \n")
    cat("         ", mod$meanx, mean$meany, "\n")
  }
  if (mod$problem == "two_samples_equal"){
    cat("       t test to compare two variances   \n")
    cat("\n")
    cat(paste("t = ", round(mod$statistic, digits=5), 
              ", num df = ", mod$df,
              ", p-value = ", mod$p.value, "\n"))
    cat("Alternative hypothesis: true difference of means is" , mod$alt,
        mod$mu, "\n")
    cat(mod$conf.level * 100, "percent confidence interval: \n")
    cat(" ", mod$conf.int, "\n")
    cat("sample estimates: \n")
    cat("         ", mod$meanx, mean$meany, "\n")
  }
}


#PRUEBAS

x <- rnorm(n=15, mean=10, sd=5)
       
t_test(meanx=10, alternative='two.sided',nx=15, varx=24)


