t_test <- function(meanx, varx, nx, meany=NULL, vary=NULL, ny=NULL, 
                   alternative='two.sided', mu=0, 
                   conf.level=0.95, var.equal=FALSE){
  
  # Checking if the information is correct
  
  # To check if the information about x sample is correct
  if (varx <= 0) 
    stop(paste("The variance x must be positive", "\n", ""))
  if (nx <= 0) 
    stop(paste("The sample size nx must be positive", "\n", ""))
  if (nx %% 1 != 0) 
    stop(paste("The sample size nx must be integer", "\n", ""))
  
  # To check if the user provided information about y sample
  if (xor(is.null(vary), is.null(ny))) 
    stop("Some information about sample y is missing", "\n", "")
  
  # To check if the information about y sample is corrected
  if (! is.null(vary) & ! is.null(ny) & ! is.null(meany)) {
    if (vary <= 0) 
      stop(paste("The variance y must be positive", "\n", ""))
    if (ny <= 0) 
      stop(paste("The sample size ny must be positive", "\n", ""))
    if (ny %% 1 != 0) 
      stop(paste("The sample size ny must be integer", "\n", ""))
    if (is.null(meany) == TRUE)
      stop(paste("Some information about y sample is missing", "\n",""))
  }
  
  #To check if the conf.level it's a number between 1 and 0
  if(conf.level <= 0 || conf.level >= 1)
    stop("The conf.level argument must be >0 and < 1", "\n", "" )
  if(conf.level < 0.5)
    warning("Confidence levels are often close to 1, eg. 0.95")
  
    #To check if alternative is a valid name
  stopifnot(alternative %in% c("two.sided","greater","less","t","g","l"))
  
  #response for a single population
  if (is.null(meany) & is.null(vary) & is.null(ny))
    res <- t_test_one(meanx, varx, nx, alternative, mu, conf.level)
  
  else {
    if (var.equal == TRUE)
      res <- t_test_two_equal(meanx, varx, nx, meany, vary, ny, 
                              alternative, mu, conf.level, var.equal)
    
    if (var.equal == FALSE)
      res <- t_test_two_difer(meanx, varx, nx, meany, vary, ny, 
                              alternative, mu, conf.level, var.equal)
  }

  class(res) <- "htest"
  res   
  
}


# function for a single population

t_test_one <- function(meanx, varx, nx, alternative, mu,
                       conf.level) {
  
  alpha <- 1 - conf.level
  
  if (alternative == 'two.sided') {
    statistic <- (meanx - mu) / sqrt(varx / nx)
    p.value <- 2 * pt(q=abs(statistic), df=nx-1, lower.tail=FALSE)
    quantiles <- c(-qt(p=alpha/2, df=nx-1, lower.tail=FALSE),
                   qt(p=alpha/2, df=nx-1, lower.tail=FALSE))
    conf.int <- meanx + quantiles * sqrt(varx / nx)
  }
  
  if (alternative == 'less') {
    statistic <- (meanx - mu) / sqrt(varx / nx)
    p.value <- pt(q=statistic, df=nx-1, lower.tail=TRUE)
    conf.int <- c(-Inf,
                  meanx + qt(p=1-alpha, df=nx-1) * sqrt(varx / nx))
  }
  
  if (alternative == 'greater') {
    statistic <- (meanx - mu) / sqrt(varx / nx)
    p.value <- pt(q=statistic, df=nx-1, lower.tail=FALSE)
    conf.int <- c(meanx + qt(p=alpha, df=nx-1) * sqrt(varx / nx),
                  Inf)
  }
  
  # To ensure that the output values are in the correct form
  names(statistic) <- 't'
  parameter <- nx - 1
  names(parameter) <- 'df'
  attr(conf.int, 'conf.level') <- conf.level
  estimate <- meanx
  names(estimate) <- 'mean of x'
  null.value <- mu
  names(null.value) <- 'mean'
  method <- 'One Sample t-test'
  data.name <- paste('meanx = ', meanx, ', var = ', varx, ' and nx = ', nx, sep='')
  
  res <- list(statistic=statistic,
              parameter=parameter,
              p.value=p.value,
              conf.int=conf.int,
              estimate=estimate,
              null.value=null.value,
              alternative=alternative,
              method=method,
              data.name=data.name)
  return(res)
}

# Function for two population when the variance is different

t_test_two_difer <- function(meanx, varx, nx,
                             meany, vary, ny,
                             alternative, mu,
                             conf.level, var.equal) {
  
  
  alpha <- 1 - conf.level
  
  df <- (varx/nx + vary/ny)^2 / ((varx/nx)^2 / (nx-1) + (vary/ny)^2 / (ny-1))
  se <- sqrt(varx/nx + vary/ny)
  statistic <- (meanx - meany - mu) / se
  
  if (alternative == 'two.sided') {
    p.value <- 2 * pt(q=abs(statistic), df=df, lower.tail=FALSE)
    quantiles <- c(-qt(p=alpha/2, df=df, lower.tail=FALSE),
                   qt(p=alpha/2, df=df, lower.tail=FALSE))
    conf.int <- (meanx-meany) + quantiles * se
  }
  
  if (alternative == 'less') {
    p.value <- pt(q=statistic, df=df, lower.tail=TRUE)
    conf.int <- c(-Inf,
                  (meanx-meany) + qt(p=alpha, df=df, lower.tail=F) * se)
  }
  
  if (alternative == 'greater') {
    p.value <- pt(q=statistic, df=df, lower.tail=FALSE)
    conf.int <- c((meanx-meany) - qt(p=alpha, df=df, lower.tail=F) * se,
                  Inf)
  }
  # To ensure that the output values are in the correct form
  names(statistic) <- 't'
  parameter <- df
  names(parameter) <- 'df'
  attr(conf.int, 'conf.level') <- conf.level
  estimate <- c(meanx, meany)
  names(estimate) <- c('mean of x', 'mean of y')
  null.value <- mu
  names(null.value) <- 'difference in means'
  method <- 'Welch Two Sample t-test'
  data.name <- paste('meanx = ', meanx, ', nx = ', nx,
                     ', meany = ', meany, ' and ny = ', ny, sep='')
  
  res <- list(statistic=statistic,
              parameter=parameter,
              p.value=p.value,
              conf.int=conf.int,
              estimate=estimate,
              null.value=null.value,
              alternative=alternative,
              method=method,
              data.name=data.name)
  return(res)
}


#Function for two population when the variance is equal.

t_test_two_equal <- function(meanx, varx, nx,
                             meany, vary, ny,
                             alternative, mu,
                             conf.level, var.equal) {
  
  alpha <- 1 - conf.level
  
  df <- nx + ny - 2
  sp2 <- ((nx-1) * varx + (ny-1) * vary) / df
  se <- sqrt(sp2/nx + sp2/ny)
  statistic <- (meanx - meany - mu) / se
  
  if (alternative == 'two.sided') {
    mu <- as.numeric(mu)
    alt <- paste("true difference in means is not equal to", mu)
    p.value <- 2 * pt(q=abs(statistic), df=df, lower.tail=FALSE)
    quantiles <- c(-qt(p=alpha/2, df=df, lower.tail=FALSE),
                   qt(p=alpha/2, df=df, lower.tail=FALSE))
    conf.int <- (meanx-meany) + quantiles * se
  }
  
  if (alternative == 'less') {
    mu <- as.numeric(mu)
    alt <- paste("true difference in means is less than", mu)
    p.value <- pt(q=statistic, df=df, lower.tail=TRUE)
    conf.int <- c(-Inf,
                  (meanx - meany) + qt(p=alpha, df=df, lower.tail=F) * se)
  }
  
  if (alternative == 'greater') {
    mu <- as.numeric(mu)
    alt<- paste("true difference in means is greater than", mu)
    p.value <- pt(q=statistic, df=df, lower.tail=FALSE)
    conf.int <- c((meanx-meany) - qt(p=alpha, df=df, lower.tail=F) * se,
                  Inf)
  }
  
  # To ensure that the output values are in the correct form
  names(statistic) <- 't'
  parameter <- df
  names(parameter) <- 'df'
  attr(conf.int, 'conf.level') <- conf.level
  estimate <- c(meanx, meany)
  names(estimate) <- c('mean of x', 'mean of y')
  null.value <- mu
  names(null.value) <- 'difference in means'
  method <- 'Two Sample t-test'
  data.name <- paste('meanx =', meanx, ', nx =', nx,
                     ', meany =', meany, 'and ny =', ny)
  
  res <- list(statistic = statistic,
              parameter = parameter,
              p.value = p.value,
              conf.int = conf.int,
              estimate = estimate,
              null.value = null.value,
              alternative = alternative,
              method = method,
              data.name = data.name)
  return(res)
}


###para ver los resultados 

plot.htest <- function(mod, col='red', cex=0.8, shade.col='red')
{
  # 'One Sample t-test'
  if (mod$method %in% c('One Sample t-test')) {
    if (mod$alternative == 'less')
      asbio::shade.norm(x=mod$statistic, tail='lower',
                        las=1, shade.col=shade.col)
    if (mod$alternative == 'greater')
      asbio::shade.norm(x=mod$statistic, tail='upper', 
                        las=1, shade.col=shade.col)
    if (mod$alternative == 'two.sided')
      asbio::shade.norm(x=mod$statistic, tail="two", 
                        las=1, shade.col=shade.col)
    title(main='Shaded area corresponds to p-value')
    mtext(text=round(mod$statistic, digits=4),
          side=1, at=mod$statistic, 
          col=col, cex=cex, adj=0.5)
  }
  
  # Welch Test
  if (mod$method %in% c('Welch Two Sample t-test')) {
    if (mod$alternative == 'less')
      asbio::shade.chi(x=mod$statistic, nu=mod$parameter, 
                       tail='lower', las=1, shade.col=shade.col)
    if (mod$alternative == 'greater')
      asbio::shade.chi(x=mod$statistic, nu=mod$parameter, 
                       tail='upper', las=1, shade.col=shade.col)
    if (mod$alternative == 'two.sided')
      asbio::shade.chi(nu=mod$parameter, tail="two",
                       las=1, shade.col=shade.col,
                       prob.to.each.tail=mod$p.value/2)
    title(main='Shaded area corresponds to p-value')
    mtext(text=round(mod$statistic, digits=4),
          side=1, at=mod$statistic, 
          col=col, cex=cex, adj=0.5)
  }
  
  # Two Sample t-test 
  if (mod$method %in% c('Two Sample t-test')) {
    if (mod$alternative == 'less')
      asbio::shade.F(x=mod$statistic,
                     nu=mod$parameter,
                     tail='lower', las=1, shade.col=shade.col)
    if (mod$alternative == 'greater')
      asbio::shade.F(x=mod$statistic,
                     nu1=mod$parameter[1],
                     nu2=mod$parameter[2], 
                     tail='upper', las=1, shade.col=shade.col)
    if (mod$alternative == 'two.sided')
      asbio::shade.F(nu1=mod$parameter[1],
                     nu2=mod$parameter[2], 
                     tail="two", shade.col=shade.col,
                     prob.to.each.tail=mod$p.value/2, las=1)
    title(main='Shaded area corresponds to p-value')
    mtext(text=round(mod$statistic, digits=4),
          side=1, at=mod$statistic, 
          col=col, cex=cex, adj=0.5)
  }
}



